// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  bio       String?
  followers Follow[]  @relation("Following") // Users who follow this user
  following Follow[]  @relation("Followers") // Users this user follows
  posts     Post[]    @relation("UserPosts")
  likes     Liked[]   @relation("UserLikes")
  Comment   Comment[]
}

model Follow {
  id          String @id @default(uuid())
  followerId  String // The user who is following
  followingId String // The user being followed
  follower    User   @relation("Followers", fields: [followerId], references: [username])
  following   User   @relation("Following", fields: [followingId], references: [username])

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

model Post {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  authorId  String
  author    User      @relation("UserPosts", fields: [authorId], references: [username])
  likes     Liked[]   @relation("PostLikes") // Removed onDelete: Cascade
  comments  Comment[] @relation("PostComments") // Removed onDelete: Cascade
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  createdAt DateTime @default(now())
  userId    String
  postId    String
  author    User     @relation(fields: [userId], references: [username])
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade) // Moved here
}

model Liked {
  id     String @id @default(uuid())
  userId String
  postId String
  user   User   @relation("UserLikes", fields: [userId], references: [username])
  post   Post   @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade) // Moved here

  @@unique([userId, postId]) // Prevent duplicate likes
}